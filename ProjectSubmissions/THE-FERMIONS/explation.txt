################################################################################
#                            THE FERMIONS                                      #
#                                                                              #
#  Code for the Traveling Salesman Problem (TSP) using a QUBO formulation        #
#                                                                              #
#  Team Members:                                                               #
#    - ATHARVA M                                                               #
#    - MANAV DEWANGAN                                                          #
#    - AKSHAT AGARWAL                                                          #
#                                                                              #
#  Contact Information:                                                        #
#    Phone: 9901170033                                                         #
#    Email: matharva@357@gmail.com                                              #
#                                                                              #
#  Description:                                                                #
#    This code implements a QUBO model formulation to solve the TSP. It        #
#    computes the pairwise Euclidean distances between cities, builds a QUBO    #
#    model that encodes the TSP constraints and objective function, and uses     #
#    an exact binary quadratic model solver to find an optimal tour.           #
################################################################################




#####################################
#         PREREQUISITES             #
#####################################

1. Python 3.6 or Later
   - Ensure that Python 3.6 or a later version is installed.
   - Download from: https://www.python.org/downloads/

2. NumPy
   - Used for numerical operations and array handling.
   - Install via pip:
     pip install numpy

3. dimod (D-Wave Ocean SDK)
   - Required for building and solving the binary quadratic model (BQM).
   - Install via pip:
     pip install dimod

4. Standard Python Library Modules
   - The program uses the built-in "math" module, which is included with Python.


########################################
#           CODE SECTION               #
########################################

import math
import numpy as np
import dimod

def create_data_model():
    # Initialize an empty dictionary to hold data
    data = {}
    # Define the "locations" key with a list of coordinate tuples for each city
    data["locations"] = [
         (288, 129), (256, 141), (270, 133), (256, 157), (288, 149)
    ]
    # Return the data dictionary for use in the model
    return data

def compute_distance_matrix(locations):
    # Get the number of locations (cities)
    n = len(locations)
    # Create an n x n matrix filled with zeros to store distances
    dist = np.zeros((n, n))
    # Iterate over each pair of cities (i, j)
    for i in range(n):
        for j in range(n):
            # Compute the Euclidean distance between city i and city j using math.hypot
            dist[i, j] = math.hypot(locations[i][0] - locations[j][0],
                                    locations[i][1] - locations[j][1])
    # Return the computed distance matrix
    return dist

def build_tsp_qubo(dist, A=1000, B=1000):
    # Determine the number of cities from the distance matrix dimensions
    n = len(dist)
    # Initialize an empty dictionary Q to hold the QUBO coefficients
    Q = {}

    # Enforcing the constraint: "each city appears exactly once in the tour"
    for i in range(n):
        for j in range(n):
            # Create a unique index for the city i at position j in the tour
            idx = i * n + j
            # Subtract penalty (diagonal term) for each city-position pair
            Q[(idx, idx)] = Q.get((idx, idx), 0) - 2 * A
        for j in range(n):
            # For each city, add penalty terms to ensure a city does not appear twice
            for k in range(j + 1, n):
                idx1 = i * n + j
                idx2 = i * n + k
                Q[(idx1, idx2)] = Q.get((idx1, idx2), 0) + 2 * A

    # Enforcing the constraint: "each tour position is occupied by exactly one city"
    for j in range(n):
        for i in range(n):
            # Create a unique index for each city at tour position j
            idx = i * n + j
            # Subtract penalty (diagonal term) for each position-city pair
            Q[(idx, idx)] = Q.get((idx, idx), 0) - 2 * B
        for i in range(n):
            # For each tour position, add penalty terms to avoid assigning more than one city
            for k in range(i + 1, n):
                idx1 = i * n + j
                idx2 = k * n + j
                Q[(idx1, idx2)] = Q.get((idx1, idx2), 0) + 2 * B

    # Adding the objective: minimize total travel distance for the tour
    for j in range(n):
        # j_next represents the next position in the tour; wrap-around using modulo
        j_next = (j + 1) % n
        for i in range(n):
            for k in range(n):
                # Ensure different cities for consecutive positions
                if i != k:
                    idx1 = i * n + j
                    idx2 = k * n + j_next
                    # Add the distance between cities i and k to the QUBO objective term
                    Q[(idx1, idx2)] = Q.get((idx1, idx2), 0) + dist[i][k]
    # Return the complete QUBO dictionary encoding constraints and objective
    return Q

def solve_tsp_qubo(Q):
    # Convert the QUBO dictionary into a Binary Quadratic Model (BQM) using dimod
    bqm = dimod.BinaryQuadraticModel.from_qubo(Q)
    # Create an exact solver instance from dimod for an exhaustive search
    sampler = dimod.ExactSolver()
    # Use the solver to sample (solve) the BQM
    sample_set = sampler.sample(bqm)
    # Retrieve the best sample (solution) from the sample set
    best_sample = sample_set.first.sample
    # Retrieve the energy (objective value) corresponding to the best sample
    best_energy = sample_set.first.energy
    # Return the best solution and its energy value
    return best_sample, best_energy

def parse_solution(sample, n):
    # Initialize the tour list with placeholders (-1) for each position
    tour = [-1] * n
    # Iterate over every city and tour position
    for i in range(n):
        for j in range(n):
            # Create a unique index for the assignment of city i to position j
            idx = i * n + j
            # Check if city i is assigned to position j in the solution (indicated by 1)
            if sample.get(idx, 0) == 1:
                # Set city i at the j-th position in the tour list
                tour[j] = i
    # Return the tour as a list of city indices in order of visitation
    return tour

def main():
    # Generate the data model which includes the list of locations
    data = create_data_model()
    # Extract the list of city coordinates from the data model
    locations = data["locations"]
    # Determine the number of cities
    n = len(locations)

    # Compute the matrix of pairwise Euclidean distances between cities
    dist = compute_distance_matrix(locations)

    # Build the QUBO model for the TSP using the distance matrix and penalty weights A and B
    Q = build_tsp_qubo(dist, A=1000, B=1000)

    # Solve the QUBO model to obtain the optimal binary solution and its associated energy
    best_sample, energy = solve_tsp_qubo(Q)

    # Parse the binary solution into an ordered tour of city indices
    tour = parse_solution(best_sample, n)
    # Print the best tour found (as city indices) and the corresponding energy (objective value)
    print("Best tour (by city indices):", tour)
    print("Energy (objective value):", energy)

# If the script is executed as the main module, run the main function.
if __name__ == "__main__":
    main()

########################################
#       EXPLANATION SECTION            #
########################################

# 1. Import Statements:
#    - "import math": Provides access to mathematical functions such as math.hypot for computing Euclidean distances.
#    - "import numpy as np": Imports the NumPy library for efficient numerical computations and array manipulation.
#    - "import dimod": Imports the dimod library from D-Wave, used for creating and solving Binary Quadratic Models (BQMs).

# 2. create_data_model():
#    - Initializes a dictionary called "data".
#    - Stores a list of tuples representing city coordinates under the key "locations".
#    - Returns the dictionary for later use.

# 3. compute_distance_matrix(locations):
#    - Calculates the number of cities from the locations list.
#    - Initializes an n x n matrix with zeros to hold distances.
#    - Uses nested loops to compute the Euclidean distance between every pair of cities using math.hypot.
#    - Returns the completed distance matrix.

# 4. build_tsp_qubo(dist, A=1000, B=1000):
#    - Determines the number of cities from the dimensions of the distance matrix.
#    - Initializes an empty dictionary Q to store QUBO coefficients.
#
#    *Enforcing the Constraint: One City per Position*
#    - For each city and tour position, computes a unique index.
#    - Subtracts 2*A from the diagonal for each city-position pairing.
#    - For each city, adds a penalty (+2*A) between pairs of positions to ensure a city is not repeated.
#
#    *Enforcing the Constraint: One Position per City*
#    - For each tour position and city, subtracts 2*B from the diagonal.
#    - For each position, adds a penalty (+2*B) between pairs of cities to ensure each position is occupied by only one city.
#
#    *Adding the Objective Function*
#    - For each tour position, computes the next position (with wrap-around).
#    - For all distinct city pairs, adds the distance between them to the QUBO objective, effectively encoding the total travel distance.
#    - Returns the QUBO dictionary Q.

# 5. solve_tsp_qubo(Q):
#    - Converts the QUBO dictionary Q into a Binary Quadratic Model (BQM) using dimod.
#    - Uses an ExactSolver from dimod to exhaustively search for the solution that minimizes the BQM’s energy.
#    - Extracts and returns the best binary solution and its corresponding energy value.

# 6. parse_solution(sample, n):
#    - Initializes a tour list of length n with placeholder values.
#    - Iterates over all cities and tour positions, checking if a city is assigned to a position (value 1 in the sample).
#    - Updates the tour list accordingly to represent the order of visited cities.
#    - Returns the final tour list.

# 7. main():
#    - Orchestrates the entire process:
#      * Generates the data model and extracts city locations.
#      * Computes the distance matrix.
#      * Builds the QUBO model for the TSP.
#      * Solves the QUBO model to get the optimal solution.
#      * Parses the solution into a readable tour order.
#      * Prints the resulting tour and its energy (objective value).
#
# 8. Script Entry Point:
#    - The "if __name__ == '__main__':" block ensures that main() is executed only when the script is run directly,
#      not when it is imported as a module.


#####################################
#      FINAL OUTPUT EXPLANATION     #
#####################################

Final Output:
-------------------
Best tour (by city indices): [a, b, c, ...]
Energy (objective value): X

Explanation:
- Best tour (by city indices):
  This is a list of integers that represents the order in which the cities are visited in the computed tour. Each number corresponds to the index of a city as defined in the "locations" list in the data model. For example, if the output is [1, 3, 0, 4, 2], then:
    * The tour starts at the city with index 1,
    * Proceeds to the city with index 3,
    * Then goes to the city with index 0,
    * Followed by the city with index 4,
    * And finally visits the city with index 2.
  
- Energy (objective value):
  The "energy" represents the computed value of the objective function in the QUBO model. In this context, energy is a measure of the quality of the solution—it includes both the total travel distance (cost of moving between cities) and any penalty incurred from violating constraints (such as a city appearing more than once in the tour). A lower energy value indicates a better (more optimal) solution, as it means the total travel cost and any penalties are minimized.


#####################################
#   EXPECTED ERRORS & LIMITATIONS   #
#####################################

Expected Errors:
-------------------
1. Import Errors:
   - You might encounter errors such as:
     * ModuleNotFoundError: No module named 'numpy'
     * ModuleNotFoundError: No module named 'dimod'
   - These occur if the required libraries (NumPy and dimod) are not installed.
   - Resolution: Install the necessary packages using pip (e.g., pip install numpy dimod).

2. Data Model Issues:
   - If the "locations" list is empty or contains invalid data, functions like compute_distance_matrix may fail or produce incorrect results.
   - Resolution: Ensure that the data model is correctly defined with valid coordinate tuples.

3. Solver Limitations:
   - The ExactSolver used in the code performs an exhaustive search.
   - For larger TSP instances, this may lead to:
     * Memory errors
     * Extremely long computation times
   - Resolution: Limit the problem size or use a heuristic/approximate solver for larger instances.

Limitations of the Code:
--------------------------
1. Scalability:
   - The code is designed for small TSP instances because the ExactSolver exhaustively explores the solution space.
   - For a high number of cities, the computational cost grows exponentially.

2. Hard-Coded Penalty Parameters:
   - Penalty weights A and B are set to fixed values (default: 1000).
   - These may not be optimal for all problems and might require tuning for different TSP instances.

3. Specific Problem Domain:
   - The implementation is tailored for the symmetric TSP using Euclidean distances.
   - It may not directly support asymmetric TSP or TSP variants with additional constraints without modifications.

4. Limited Error Handling:
   - The code does not include robust error handling or input validation.
   - Unexpected or malformed inputs could lead to runtime errors.

5. Limited Output Information:
   - The final output includes only the best tour (city indices) and the energy (objective value).
   - Additional details, such as the actual tour distance or alternative solutions, are not provided.
